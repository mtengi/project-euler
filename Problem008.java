/******************************************************************************
 * Mark Tengi
 * Written: May 7, 2013
 * 
 * Project Euler: Problem008 - Largest product in a series
 * 
 * 
 * Find the greatest product of five consecutive digits in the 1000-digit number.
 * 
 * 73167176531330624919225119674426574742355349194934
 * 96983520312774506326239578318016984801869478851843
 * 85861560789112949495459501737958331952853208805511
 * 12540698747158523863050715693290963295227443043557
 * 66896648950445244523161731856403098711121722383113
 * 62229893423380308135336276614282806444486645238749
 * 30358907296290491560440772390713810515859307960866
 * 70172427121883998797908792274921901699720888093776
 * 65727333001053367881220235421809751254540594752243
 * 52584907711670556013604839586446706324415722155397
 * 53697817977846174064955149290862569321978468622482
 * 83972241375657056057490261407972968652414535100474
 * 82166370484403199890008895243450658541227588666881
 * 16427171479924442928230863465674813919123162824586
 * 17866458359124566529476545682848912883142607690042
 * 24219022671055626321111109370544217506941658960408
 * 07198403850962455444362981230987879927244284909188
 * 84580156166097919133875499200524063689912560717606
 * 05886116467109405077541002256983155200055935729725
 * 71636269561882670428252483600823257530420752963450
 * 
 * 
 * Answer: 40824
 * 
 *****************************************************************************/

public class Problem008 {

    /**
     * Get the product of the n numbers at index i. If there is a zero,
     * indicate this by returning the negative of the zero's offset from i.
     */
    public static int getN(String num, int i, int n) {
        int prod = 1;
        for (int j = 0; j < n; j++) {
            if (num.charAt(j + i) == '0') {
                return -(j + 1);
            } else {
                prod *= Integer.parseInt("" + num.charAt(i + j));
            }
        }
        return prod;
    }

    public static void main(String[] args) {
        String num = "731671765313306249192251196744265747423553491949349698352"
                + "031277450632623957831801698480186947885184385861560789112949"
                + "495459501737958331952853208805511125406987471585238630507156"
                + "932909632952274430435576689664895044524452316173185640309871"
                + "112172238311362229893423380308135336276614282806444486645238"
                + "749303589072962904915604407723907138105158593079608667017242"
                + "712188399879790879227492190169972088809377665727333001053367"
                + "881220235421809751254540594752243525849077116705560136048395"
                + "864467063244157221553975369781797784617406495514929086256932"
                + "197846862248283972241375657056057490261407972968652414535100"
                + "474821663704844031998900088952434506585412275886668811642717"
                + "147992444292823086346567481391912316282458617866458359124566"
                + "529476545682848912883142607690042242190226710556263211111093"
                + "705442175069416589604080719840385096245544436298123098787992"
                + "724428490918884580156166097919133875499200524063689912560717"
                + "606058861164671094050775410022569831552000559357297257163626"
                + "9561882670428252483600823257530420752963450";
        int product = 0, i = 0, largest = 0, n = 5;
        while (i < num.length()) {
            if (product == 0) {
                int ret = getN(num, i, n);
                // if there is a 0 in the next n numbers, move past the 0 and
                // try again
                if (ret < 0) {
                    i -= ret;
                    continue;
                }
                product = ret;
                i += n;
            }
            // divide by the number n places previous and multiply by the number
            // at i to keep a dynamic product of the last n integers
            product /= Integer.parseInt("" + num.charAt(i - n));
            product *= Integer.parseInt("" + num.charAt(i));
            if (product > largest) {
                largest = product;
            }
            i++;
        }
        System.out.println(largest);
    }
}